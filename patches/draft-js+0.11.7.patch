diff --git a/node_modules/draft-js/lib/DraftEditorCompositionHandler.js b/node_modules/draft-js/lib/DraftEditorCompositionHandler.js
index 480714d..e71f8a8 100644
--- a/node_modules/draft-js/lib/DraftEditorCompositionHandler.js
+++ b/node_modules/draft-js/lib/DraftEditorCompositionHandler.js
@@ -31,197 +31,222 @@ var getDraftEditorSelection = require("./getDraftEditorSelection");
 var getEntityKeyForSelection = require("./getEntityKeyForSelection");
 
 var nullthrows = require("fbjs/lib/nullthrows");
-
+const { OrderedSet } = require("immutable");
+const { identity } = require("lodash");
 var isIE = UserAgent.isBrowser('IE');
-/**
- * Millisecond delay to allow `compositionstart` to fire again upon
- * `compositionend`.
- *
- * This is used for Korean input to ensure that typing can continue without
- * the editor trying to render too quickly. More specifically, Safari 7.1+
- * triggers `compositionstart` a little slower than Chrome/FF, which
- * leads to composed characters being resolved and re-render occurring
- * sooner than we want.
- */
 
 var RESOLVE_DELAY = 20;
-/**
- * A handful of variables used to track the current composition and its
- * resolution status. These exist at the module level because it is not
- * possible to have compositions occurring in multiple editors simultaneously,
- * and it simplifies state management with respect to the DraftEditor component.
- */
 
 var resolved = false;
 var stillComposing = false;
 var domObserver = null;
+var startOffset = null;
+var endOffset = null;
+var selectedBlock = null;
 
 function startDOMObserver(editor) {
-  if (!domObserver) {
-    domObserver = new DOMObserver(getContentEditableContainer(editor));
-    domObserver.start();
-  }
+    if (!domObserver) {
+        domObserver = new DOMObserver(getContentEditableContainer(editor));
+        domObserver.start();
+    }
 }
 
 var DraftEditorCompositionHandler = {
-  /**
-   * A `compositionstart` event has fired while we're still in composition
-   * mode. Continue the current composition session to prevent a re-render.
-   */
-  onCompositionStart: function onCompositionStart(editor) {
-    stillComposing = true;
-    startDOMObserver(editor);
-  },
-
-  /**
-   * Attempt to end the current composition session.
-   *
-   * Defer handling because browser will still insert the chars into active
-   * element after `compositionend`. If a `compositionstart` event fires
-   * before `resolveComposition` executes, our composition session will
-   * continue.
-   *
-   * The `resolved` flag is useful because certain IME interfaces fire the
-   * `compositionend` event multiple times, thus queueing up multiple attempts
-   * at handling the composition. Since handling the same composition event
-   * twice could break the DOM, we only use the first event. Example: Arabic
-   * Google Input Tools on Windows 8.1 fires `compositionend` three times.
-   */
-  onCompositionEnd: function onCompositionEnd(editor) {
-    resolved = false;
-    stillComposing = false;
-    setTimeout(function () {
-      if (!resolved) {
-        DraftEditorCompositionHandler.resolveComposition(editor);
-      }
-    }, RESOLVE_DELAY);
-  },
-  onSelect: editOnSelect,
-
-  /**
-   * In Safari, keydown events may fire when committing compositions. If
-   * the arrow keys are used to commit, prevent default so that the cursor
-   * doesn't move, otherwise it will jump back noticeably on re-render.
-   */
-  onKeyDown: function onKeyDown(editor, e) {
-    if (!stillComposing) {
-      // If a keydown event is received after compositionend but before the
-      // 20ms timer expires (ex: type option-E then backspace, or type A then
-      // backspace in 2-Set Korean), we should immediately resolve the
-      // composition and reinterpret the key press in edit mode.
-      DraftEditorCompositionHandler.resolveComposition(editor);
-
-      editor._onKeyDown(e);
-
-      return;
-    }
-
-    if (e.which === Keys.RIGHT || e.which === Keys.LEFT) {
-      e.preventDefault();
+    onCompositionStart: function onCompositionStart(editor) {
+        var editorState = EditorState.set(editor._latestEditorState, {
+            inCompositionMode: false
+        });
+        selectedBlock = editorState.getSelection();
+        startOffset = editorState.getSelection().getStartOffset()
+        endOffset = editorState.getSelection().getEndOffset()
+        stillComposing = true;
+        startDOMObserver(editor);
+    },
+
+    onCompositionEnd: function onCompositionEnd(editor) {
+        resolved = false;
+        stillComposing = false;
+        //   setTimeout(function () {
+        if (!resolved) {
+            DraftEditorCompositionHandler.resolveComposition(editor);
+        }
+        //   }, RESOLVE_DELAY);
+    },
+    onSelect: editOnSelect,
+
+    onKeyDown: function onKeyDown(editor, e) {
+        if (!stillComposing) {
+            DraftEditorCompositionHandler.resolveComposition(editor);
+            editor._onKeyDown(e);
+            return;
+        }
+
+        if (e.which === Keys.RIGHT || e.which === Keys.LEFT ) {
+            e.preventDefault();
+        }
+    },
+
+    onKeyPress: function onKeyPress(_editor, e) {
+        if (e.which === Keys.RETURN) {
+            e.preventDefault();
+        }
+    },
+
+    resolveComposition: function resolveComposition(editor) {
+        if (stillComposing) {
+            return;
+        }
+        var mutations = nullthrows(domObserver).stopAndFlushMutations();
+        domObserver = null;
+        resolved = true;
+        var editorState = EditorState.set(editor._latestEditorState, {
+            inCompositionMode: false
+        });
+        editor.exitCurrentMode();
+        
+        if (!mutations.size) {
+            editor.update(editorState);
+            return;
+        } 
+
+        var contentState = editorState.getCurrentContent();
+
+        mutations.forEach(function (composedChars, offsetKey) {
+            var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey),
+                blockKey = _DraftOffsetKey$decod.blockKey,
+                decoratorKey = _DraftOffsetKey$decod.decoratorKey,
+                leafKey = _DraftOffsetKey$decod.leafKey;
+
+            if(editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]) == null){
+                console.log(offsetKey)
+                return false;
+            }    
+            var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]),
+                start = _editorState$getBlock.start,
+                end = _editorState$getBlock.end;
+
+            var replacementRange = editorState.getSelection().merge({
+                anchorKey: blockKey,
+                focusKey: blockKey,
+                anchorOffset: start,
+                focusOffset: end,
+                isBackward: false
+            });
+
+            const interfaceStyle = JSON.parse(localStorage.getItem('inline-style'));
+
+            var entityKey = getEntityKeyForSelection(contentState, replacementRange);
+            if (localStorage.getItem('enter_block_key') != '') {//개행하여 윗줄 스타일 상속
+                let endIdx = editorState.getBlockTree(localStorage.getItem('enter_block_key'))._tail.array[0].end - 1;
+                var currentStyle = contentState.getBlockForKey(localStorage.getItem('enter_block_key')).getInlineStyleAt(endIdx);
+                const resultStyle = interfaceStyle != null ? OrderedSet.of(...interfaceStyle) : currentStyle;
+                contentState = DraftModifier.replaceText(contentState, replacementRange, composedChars, resultStyle, entityKey);
+            }
+            else {//입력중인 스타일로
+                /*
+                    //입력 시작 후 바로 삭제하면 뒷 글자 출력됨----
+                    //마지막 글자 입력 후 삭제시 뒷글자 나옴----
+                    //블록 지정 후 입력시 뒷부분 나옴(블록상태값이 필요)----
+                    //입력된 블록이 2개이상이면 뒷블록 오동작----
+                    //드래그 선택한 블록이 2개이상의 스타일이면 뒷블록 오동작
+                    //개행 후 첫글자는 inline 적용한 style이 안먹음.----
+                    
+                */
+                var currentStyle = contentState.getBlockForKey(blockKey).getInlineStyleAt(start);
+                const resultStyle = interfaceStyle != null ? OrderedSet.of(...interfaceStyle) : currentStyle;
+                console.log(
+                    // editorState.getSelection().focusOffset-1, 
+                    contentState.getBlockForKey(blockKey).text, //전체
+                    // contentState.getBlockForKey(blockKey).text.length, //전체길이
+                    composedChars,//블럭
+                    // composedChars.length,//블럭길이 
+                    start + '~' + end,
+                    startOffset + '/' + endOffset,
+                    // mutations.size
+                    // end,//절대블럭길이
+                    // composedChars.substr(composedChars.length-1), 
+                    // mutations
+                )
+                if(editorState.getSelection().focusOffset-1 < end){
+                    // console.log("중간", editorState.getSelection().focusOffset-1, composedChars.substr(editorState.getSelection().focusOffset-1,1), start, editorState.getSelection().focusOffset-1 - start)
+                    // console.log(composedChars.length, editorState.getSelection().focusOffset-1 - start);
+                    var replacementRange = editorState.getSelection().merge({
+                        anchorKey: blockKey,
+                        focusKey: blockKey,
+                        anchorOffset: editorState.getSelection().focusOffset-1,
+                        focusOffset: editorState.getSelection().focusOffset-1,
+                        isBackward: false
+                    });
+                    // if(composedChars.length+start != end){//입력시, backspace로 인한 composing이라 동작하면 안됨. 
+                    if(composedChars.length+start > end){//입력시, backspace로 인한 composing이라 동작하면 안됨. 
+                        // console.log("offset", startOffset ,endOffset)
+                        if(startOffset == endOffset){//블럭 안잡았을때
+                            contentState = DraftModifier.replaceText(contentState, replacementRange, composedChars.substr(editorState.getSelection().focusOffset-1-start,1), resultStyle, null); 
+                        }
+                        else{//블럭 잡고 입력시
+                            // console.log(
+                            //     // composedChars.substr(editorState.getSelection().focusOffset-1-start,1),
+                            //     editorState.getSelection().focusOffset,
+                            //     start,
+                            //     composedChars,
+                            //     contentState.getBlockForKey(blockKey).text
+                            // )
+                            // console.log(contentState.getBlockForKey(blockKey).text.length,contentState.getBlockForKey(blockKey).text)
+                            // contentState = DraftModifier.replaceText(contentState, selectedBlock, composedChars.substr(editorState.getSelection().focusOffset-1-start,1), resultStyle, null); 
+                        }
+                    }
+                    else if(composedChars.length+start < end){
+                        // console.log(
+                        //     "블록잡음", 
+                        //     startOffset,
+                        //     endOffset, 
+                        //     composedChars.substr(editorState.getSelection().focusOffset-1-start,1)
+                        // )
+                        contentState = DraftModifier.replaceText(contentState, selectedBlock, composedChars.substr(editorState.getSelection().focusOffset-1-start,1), resultStyle, null); 
+                    }
+                    else{
+                        if(startOffset != endOffset){
+                            if(mutations._root.entries[0][0] == offsetKey){
+                                console.log('한글자',composedChars,composedChars.substr(startOffset-start,1),start,end,startOffset)
+                                contentState = DraftModifier.replaceText(contentState, selectedBlock, composedChars.substr(startOffset-start,1), resultStyle, null); 
+                            }
+                        }
+                    }
+                }
+                else{
+                    // console.log("마지막")
+                    var replacementRange = editorState.getSelection().merge({
+                        anchorKey: blockKey,
+                        focusKey: blockKey,
+                        anchorOffset: end,
+                        focusOffset: end,
+                        isBackward: false
+                    });
+                    if(composedChars.length+start != end){//입력시, backspace로 인한 composing이라 동작하면 안됨. 
+                        contentState = DraftModifier.replaceText(contentState, replacementRange, composedChars.substr(composedChars.length-1), resultStyle, null); 
+                    }
+                }
+            }
+            editorState = EditorState.set(editorState, {
+                currentContent: contentState
+            });
+
+        }); 
+        // When we apply the text changes to the ContentState, the selection always
+        // goes to the end of the field, but it should just stay where it is
+        // after compositionEnd.
+
+        var documentSelection = getDraftEditorSelection(editorState, getContentEditableContainer(editor));
+        var compositionEndSelectionState = documentSelection.selectionState;
+        editor.restoreEditorDOM(); // See:
+        // - https://github.com/facebook/draft-js/issues/2093
+        // - https://github.com/facebook/draft-js/pull/2094
+        // Apply this fix only in IE for now. We can test it in
+        // other browsers in the future to ensure no regressions
+
+        var editorStateWithUpdatedSelection = isIE ? EditorState.forceSelection(editorState, compositionEndSelectionState) : EditorState.acceptSelection(editorState, compositionEndSelectionState);
+        editor.update(EditorState.push(editorStateWithUpdatedSelection, contentState, 'insert-characters'));
+        localStorage.setItem('enter_block_key', '')
     }
-  },
-
-  /**
-   * Keypress events may fire when committing compositions. In Firefox,
-   * pressing RETURN commits the composition and inserts extra newline
-   * characters that we do not want. `preventDefault` allows the composition
-   * to be committed while preventing the extra characters.
-   */
-  onKeyPress: function onKeyPress(_editor, e) {
-    if (e.which === Keys.RETURN) {
-      e.preventDefault();
-    }
-  },
-
-  /**
-   * Attempt to insert composed characters into the document.
-   *
-   * If we are still in a composition session, do nothing. Otherwise, insert
-   * the characters into the document and terminate the composition session.
-   *
-   * If no characters were composed -- for instance, the user
-   * deleted all composed characters and committed nothing new --
-   * force a re-render. We also re-render when the composition occurs
-   * at the beginning of a leaf, to ensure that if the browser has
-   * created a new text node for the composition, we will discard it.
-   *
-   * Resetting innerHTML will move focus to the beginning of the editor,
-   * so we update to force it back to the correct place.
-   */
-  resolveComposition: function resolveComposition(editor) {
-    if (stillComposing) {
-      return;
-    }
-
-    var mutations = nullthrows(domObserver).stopAndFlushMutations();
-    domObserver = null;
-    resolved = true;
-    var editorState = EditorState.set(editor._latestEditorState, {
-      inCompositionMode: false
-    });
-    editor.exitCurrentMode();
-
-    if (!mutations.size) {
-      editor.update(editorState);
-      return;
-    } // TODO, check if Facebook still needs this flag or if it could be removed.
-    // Since there can be multiple mutations providing a `composedChars` doesn't
-    // apply well on this new model.
-    // if (
-    //   gkx('draft_handlebeforeinput_composed_text') &&
-    //   editor.props.handleBeforeInput &&
-    //   isEventHandled(
-    //     editor.props.handleBeforeInput(
-    //       composedChars,
-    //       editorState,
-    //       event.timeStamp,
-    //     ),
-    //   )
-    // ) {
-    //   return;
-    // }
-
-
-    var contentState = editorState.getCurrentContent();
-    mutations.forEach(function (composedChars, offsetKey) {
-      var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey),
-          blockKey = _DraftOffsetKey$decod.blockKey,
-          decoratorKey = _DraftOffsetKey$decod.decoratorKey,
-          leafKey = _DraftOffsetKey$decod.leafKey;
-
-      var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]),
-          start = _editorState$getBlock.start,
-          end = _editorState$getBlock.end;
-
-      var replacementRange = editorState.getSelection().merge({
-        anchorKey: blockKey,
-        focusKey: blockKey,
-        anchorOffset: start,
-        focusOffset: end,
-        isBackward: false
-      });
-      var entityKey = getEntityKeyForSelection(contentState, replacementRange);
-      var currentStyle = contentState.getBlockForKey(blockKey).getInlineStyleAt(start);
-      contentState = DraftModifier.replaceText(contentState, replacementRange, composedChars, currentStyle, entityKey); // We need to update the editorState so the leaf node ranges are properly
-      // updated and multiple mutations are correctly applied.
-
-      editorState = EditorState.set(editorState, {
-        currentContent: contentState
-      });
-    }); // When we apply the text changes to the ContentState, the selection always
-    // goes to the end of the field, but it should just stay where it is
-    // after compositionEnd.
-
-    var documentSelection = getDraftEditorSelection(editorState, getContentEditableContainer(editor));
-    var compositionEndSelectionState = documentSelection.selectionState;
-    editor.restoreEditorDOM(); // See:
-    // - https://github.com/facebook/draft-js/issues/2093
-    // - https://github.com/facebook/draft-js/pull/2094
-    // Apply this fix only in IE for now. We can test it in
-    // other browsers in the future to ensure no regressions
-
-    var editorStateWithUpdatedSelection = isIE ? EditorState.forceSelection(editorState, compositionEndSelectionState) : EditorState.acceptSelection(editorState, compositionEndSelectionState);
-    editor.update(EditorState.push(editorStateWithUpdatedSelection, contentState, 'insert-characters'));
-  }
 };
 module.exports = DraftEditorCompositionHandler;
\ No newline at end of file
